name: Create New Release For Updated Content
on:
  - repository_dispatch

jobs:
  get-latest-tag:
    runs-on: ubuntu-latest
    outputs:
      current-tag: ${{ steps.previoustag.outputs.tag}}
      next-tag: ${{ steps.nextversion.outputs.v_patch}}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get previous tags
        id: previoustag
        uses: "WyriHaximus/github-action-get-previous-tag@v1"
      - name: Get Next Patch Version
        id: nextversion
        uses: "WyriHaximus/github-action-next-semvers@v1"
        with:
          version: ${{ steps.previoustag.outputs.tag }}
          type: patch

  create-release:
    runs-on: ubuntu-latest
    needs: get-latest-tag
    outputs:
      release-tag: ${{ needs.get-latest-tag.outputs.next-tag }}
    permissions:
      packages: write
      contents: write 
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ needs.get-latest-tag.outputs.current-tag }}
      - name: Create a Release
        uses: elgohr/Github-Release-Action@v5
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          title: ${{ needs.get-latest-tag.outputs.next-tag }}
          tag: ${{ needs.get-latest-tag.outputs.next-tag }}

  build-and-publish-image:
    runs-on: ubuntu-latest
    needs: create-release
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write 
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ needs.create-release.outputs.release-tag }}

      - name: Download Bot Database
        run: aws s3 cp s3://bot/bot.db bot.db 
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.CLOUDFLARE_R2_USER }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.CLOUDFLARE_R2_SECRET }}
          AWS_DEFAULT_REGION: auto
          AWS_ENDPOINT_URL: ${{ vars.CLOUDFLARE_R2_ENDPOINT }}

      - name: Setup Docker
        uses: crazy-max/ghaction-setup-docker@v3
        with:
          daemon-config: |
            {
              "debug": true,
              "features": {
                "containerd-snapshotter": true
              }
            }
            
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Login to container registry
        uses: docker/login-action@v3
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: ${{ env.REGISTRY }}

      - name: Build Docker Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Generate attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

